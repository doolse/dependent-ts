proveNode needs flags (names only for example)

object proofs
- any number of key/value proofs
- numbers only - max size
- strings or numbers only
- function arguments (ordered)
- duplicate key policy (merge / disallowed / replace)



func something()
{
    args: object
    let x = args.x 
    let y = args.y
    let f = args.f
    let o_0 = x.hello
    let o_1 = x.something
    let o = f(o_0, o_1)
    in add(o, y)
}

x {expr, any}
y {expr, any}
f {expr, any}
o {expr, any}

TypedNodes can either be - 
a primitive
a reference to a symbol 
a key reference to a symbol
a function application - consisting of only references & prims (no function calls) 

add: func, args: [ref "o", ref "y"]

object
All keys must be a refinement of the key type.
All values must be a refinement of the value type.
If no key match, add a new field.

{
    "frogs": any,
    string: any,    
}

isEquals: exact match - type and value  
isRefinementOf: if primitive type equals (or if )

type equality & value equality

Type equality - 
Same primitive type - (int == int)
&& value equality of refinements 


types can be marked as a value. Which means they can never have a value attached, 
and cant be refined further.
All values have a type. Once a value has been set, it is an error to have 
it be calculated as something else.
expressions have a type - if they have a value they have been reduced?

If function argument keys don't get reduced to values, mark the function as un-reducible.

A refinement is equal if the values of function and all args except the target arg are equal.

Refinements are checked when a value is set or a refinement is added to the type of a value.

Because keys are being used for refinement, when a key becomes a value it must be checked 
for duplicates and blow up if the values dont unify.

---------------------
Proofs have to be easily comparable, so checking if a type has a proof or not is real quick.
Proofs should be an expression and a list of all closure references used.
proof(\a -> a < 10)
Unifying types is a matter of making sure all proofs are on both types.

Change everything to use proofs.
Change to using arrays and field proofs.
Functions are applied to a node which represents an expression list.